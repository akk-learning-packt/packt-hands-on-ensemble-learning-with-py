#+TITLE: Popular Machine Learning datasets

Machine learning relies on data in order to produce models. Here are some popular machine learning datasets.

* Libraries
#+begin_src python :session *py-session :results output :exports code :tangle "datasets.py"
from sklearn.datasets import load_digits, load_breast_cancer, load_diabetes

import numpy as np
import pandas as pd
# import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import KMeans
from sklearn.decomposition import KernelPCA

#+end_src

#+RESULTS:

* Diabetes

The diabetes dataset concerns 442 individual diabetes patients and the progression of the disease one year after a baseline measurement.
The dataset consists of 10 features, which are the patient's ~age~, ~sex~, body mass index ~(bmi)~, average blood pressure ~(bp)~, and six measurements of their blood serum. The dataset target is the progression of the disease one year after the baseline measurement. This is a regression dataset, as the target is a number.

#+begin_src python :session *py-session :results output :exports both :tangle "datasets.py"
diabetes = load_diabetes()
print(diabetes.keys())
#+end_src

#+RESULTS:
: dict_keys(['data', 'target', 'frame', 'DESCR', 'feature_names', 'data_filename', 'target_filename', 'data_module'])

getting features names ...

#+begin_src python :session *py-session :results output :exports both :tangle "datasets.py"
print(diabetes['feature_names'])
#+end_src

#+RESULTS:
: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']

getting data ...

#+begin_src python :session *py-session :results output :exports both :tangle "datasets.py"
print(diabetes['data'])
#+end_src

#+RESULTS:
#+begin_example
[[ 0.03807591  0.05068012  0.06169621 ... -0.00259226  0.01990749
  -0.01764613]
 [-0.00188202 -0.04464164 -0.05147406 ... -0.03949338 -0.06833155
  -0.09220405]
 [ 0.08529891  0.05068012  0.04445121 ... -0.00259226  0.00286131
  -0.02593034]
 ...
 [ 0.04170844  0.05068012 -0.01590626 ... -0.01107952 -0.04688253
   0.01549073]
 [-0.04547248 -0.04464164  0.03906215 ...  0.02655962  0.04452873
  -0.02593034]
 [-0.04547248 -0.04464164 -0.0730303  ... -0.03949338 -0.00422151
   0.00306441]]
#+end_example

getting it in nice tabular form ...


#+begin_src python :session *py-session :results output :exports both :tangle "datasets.py"
df = pd.DataFrame(diabetes['data'], columns=diabetes['feature_names'])
print(df.head())
#+end_src

#+RESULTS:
:         age       sex       bmi        bp        s1        s2        s3        s4        s5        s6
: 0  0.038076  0.050680  0.061696  0.021872 -0.044223 -0.034821 -0.043401 -0.002592  0.019907 -0.017646
: 1 -0.001882 -0.044642 -0.051474 -0.026328 -0.008449 -0.019163  0.074412 -0.039493 -0.068332 -0.092204
: 2  0.085299  0.050680  0.044451 -0.005670 -0.045599 -0.034194 -0.032356 -0.002592  0.002861 -0.025930
: 3 -0.089063 -0.044642 -0.011595 -0.036656  0.012191  0.024991 -0.036038  0.034309  0.022688 -0.009362
: 4  0.005383 -0.044642 -0.036385  0.021872  0.003935  0.015596  0.008142 -0.002592 -0.031988 -0.046641
